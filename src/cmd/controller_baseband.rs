//! Controller & Baseband commands [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-5ced811b-a6ce-701a-16b2-70f2d9795c05)

extern crate alloc;

use crate::cmd;
use crate::param::{
    BdAddr, ConnHandle, ConnHandleCompletedPackets, ControllerToHostFlowControl, Duration, EventMask, EventMaskPage2,
    FilterConditionType, FilterType, PinType, PowerLevelKind, ScanEnableType,
};

// Ox001 - 0x00f

cmd! {
    /// Set Event Mask command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-9cf88217-77b4-aeb6-61fb-d1129d48a67c)
    SetEventMask(CONTROL_BASEBAND, 0x0001) {
        Params = EventMask;
        Return = ();
    }
}

cmd! {
    /// Reset command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-b0aaafb1-0601-865c-2703-4f4caa4dee2e)
    Reset(CONTROL_BASEBAND, 0x0003) {
        Params = ();
        Return = ();
    }
}

cmd! {
    /// Set Event Filter command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-b27a930e-cf04-07ad-2fb1-c1f890a2a5ff)
    ///
    /// Controls which events are generated by the HCI for the Host.
    SetEventFilter(CONTROL_BASEBAND, 0x0005) {
        SetEventFilterParams  {
            filter_type: FilterType,
            filter_condition: FilterConditionType,
        }
        Return = ();
    }
}

cmd! {
    /// Flush command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-1354d09c-b4c7-a2d4-5ac9-8bff24fd6b09)
    Flush(CONTROL_BASEBAND, 0x0008) {
        Params = ConnHandle;
        Return = ConnHandle;
    }
}

cmd! {
    /// Read PIN Type command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-dd82f0be-a8ac-1f1e-d2fc-fdf1d9c785e1)
    ReadPinType(CONTROL_BASEBAND, 0x0009) {
        Params = ();
        ReadPinTypeReturn {
            pin_type: PinType,
        }
    }
}

cmd! {
    /// Write PIN Type command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-842c5b9c-9773-8e87-30ee-a2f8223b6bf3)
    WritePinType(CONTROL_BASEBAND, 0x000a) {
        WritePinTypeParams {
            pin_type: PinType,
        }
        Return = ();
    }
}

cmd! {
    /// Read Stored Link Key command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-9c3e0da9-138b-7641-6e84-d2d17c1f082e)
    ///
    /// Reads stored link keys for one or more devices, or all devices.
    ReadStoredLinkKey(CONTROL_BASEBAND, 0x000d) {
        ReadStoredLinkKeyParams {
            bd_addr: BdAddr,
            read_all: bool,
        }
        ReadStoredLinkKeyReturn {
            max_num_keys: u8,
            num_keys_read: u8,
        }
    }
}

// 0x01 - 0x01f

// TODO: find a way to have bytes in Params
// cmd! {
//     /// Write Stored Link Key command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-bfff869a-4d6f-62dd-439d-249db64ddf75)
//     WriteStoredLinkKey(CONTROL_BASEBAND, 0x0011) {
//         WriteStoredLinkKeyParams<'a> {
//             num_keys_to_write: u8,
//             bytes: &'a [u8], // bd_addr * num_keys_to_write + link_key * num_keys_to_write
//         }
//         WriteStoredLinkKeyReturn {
//             num_keys_written: u8,
//         }
//     }
// }

cmd! {
    /// Delete Stored Link Key command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-f81b6bd8-b4c1-38c5-ebf4-6a87e8e2da0e)
    DeleteStoredLinkKey(CONTROL_BASEBAND, 0x0012) {
        DeleteStoredLinkKeyParams {
            bd_addr: BdAddr,
            delete_all: bool,
        }
        DeleteStoredLinkKeyReturn {
            num_keys_deleted: u16,
        }
    }
}

cmd! {
    /// Write Local Name command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-fad54669-572b-c043-1111-d6adf22683f3)
    WriteLocalName(CONTROL_BASEBAND, 0x0013) {
        WriteLocalNameParams {
            local_name: [u8; 248],
        }
        Return = ();
    }
}

cmd! {
    /// Read Local Name command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-aeec56fa-a1cc-f66a-a618-a8db81c2f015)
    ReadLocalName(CONTROL_BASEBAND, 0x0014) {
        Params = ();
        ReadLocalNameReturn {
            local_name: [u8; 248],
        }
    }
}

cmd! {
    /// Read Connection Accept Timeout command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-c273cd12-19e3-f637-987e-c7c2f6f1f334)
    ReadConnectionAcceptTimeout(CONTROL_BASEBAND, 0x0015) {
        Params = ();
        ReadConnectionAcceptTimeoutReturn {
            connection_accept_timeout: u16,
        }
    }
}

cmd! {
    /// Write Connection Accept Timeout command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-70c4664c-429c-c90d-2acf-7af43001c656)
    WriteConnectionAcceptTimeout(CONTROL_BASEBAND, 0x0016) {
        WriteConnectionAcceptTimeoutParams {
            timeout: u16,
        }
        Return = ();
    }
}

cmd! {
    /// Read Page Timeout command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-82a71218-d204-032b-1c5e-3987279e2974)
    ReadPageTimeout(CONTROL_BASEBAND, 0x0017) {
        Params = ();
        ReadPageTimeoutReturn {
            timeout: u16,
        }
    }
}

cmd! {
    /// Write Page Timeout command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-2eb95f10-ba07-d921-6e55-09d1c7e05497)
    WritePageTimeout(CONTROL_BASEBAND, 0x0018) {
        WritePageTimeoutParams {
            timeout: u16,
        }
        Return = ();
    }
}

cmd! {
    /// Read Scan Enable command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-e46d5878-1baf-2a4a-92e3-5b6130d75e7e)
    ReadScanEnable(CONTROL_BASEBAND, 0x0019) {
        Params = ();
        Return = ScanEnableType;
    }
}

cmd! {
    /// Write Scan Enable command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-8c654259-b582-4d20-f77b-17e76113f8b7)
    WriteScanEnable(CONTROL_BASEBAND, 0x001A) {
        WriteScanEnableParams {
            scan_enable: ScanEnableType,
        }
        Return = ();
    }
}

cmd! {
    /// Read Page Scan Activity command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-ca36fe19-9b44-b57e-ba86-41fc4a5eeca8)
    ReadPageScanActivity(CONTROL_BASEBAND, 0x001B) {
        Params = ();
        ReadPageScanActivityReturn {
            interval: u16,
            window: u16,
        }
    }
}

cmd! {
    /// Write Page Scan Activity command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-d170e27f-8068-9bae-7322-4c89b4b960db)
    WritePageScanActivity(CONTROL_BASEBAND, 0x001c) {
        WritePageScanActivityParams {
            interval: u16,
            window: u16,
        }
        Return = ();
    }
}

cmd! {
    /// Read Inquiry Scan Activity command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-91e26f9e-c3a3-778e-0cec-909cae0d452a)
    ReadInquiryScanActivity(CONTROL_BASEBAND, 0x001d) {
        Params = ();
        ReadInquiryScanActivityReturn {
            interval: u16,
            window: u16,
        }
    }
}

cmd! {
    /// Write Inquiry Scan Activity command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-276bb784-86fb-f4d5-f1d3-71c818013ad6)
    WriteInquiryScanActivity(CONTROL_BASEBAND, 0x001e) {
        WriteInquiryScanActivityParams {
            interval: u16,
            window: u16,
        }
        Return = ();
    }
}

cmd! {
    /// Read Authentication Enable command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-98044474-c5bc-831e-ac2c-5529c4d3fc5b)
    ReadAuthenticationEnable(CONTROL_BASEBAND, 0x001f) {
        Params = ();
        ReadAuthenticationEnableReturn {
            enable: bool,
        }
    }
}

// 0x020 - 0x02f

cmd! {
    /// Read Transmit Power Level command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-7205a3ee-15c7-cc48-c512-a959b4e3f560)
    ReadTransmitPowerLevel(CONTROL_BASEBAND, 0x002d) {
        ReadTransmitPowerLevelParams {
            kind: PowerLevelKind,
        }
        ReadTransmitPowerLevelReturn {
            tx_power_level: i8,
        }
        Handle = handle: ConnHandle;
    }
}

// 0x031 - 0x03f

cmd! {
    /// Set Controller To Host Flow Control command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-64d757fc-e1da-329f-6d6a-16453750f325)
    SetControllerToHostFlowControl(CONTROL_BASEBAND, 0x0031) {
        Params = ControllerToHostFlowControl;
        Return = ();
    }
}

cmd! {
    /// Host Buffer Size command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-99748527-de87-bf9c-935d-baf7e3f35b12)
    HostBufferSize(CONTROL_BASEBAND, 0x0033) {
        HostBufferSizeParams {
            host_acl_data_packet_len: u16,
            host_sync_data_packet_len: u8,
            host_total_acl_data_packets: u16,
            host_total_sync_data_packets: u16,
        }
        Return = ();
    }
}

cmd! {
    /// Host Number Of Completed Packets command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-14569cb0-16b0-7dc0-a1d4-e5a4ef44d81a)
    ///
    /// *Note:* This command only returns a [`CommandComplete`](crate::event::CommandComplete) event on error. No event is generated on success.
    HostNumberOfCompletedPackets(CONTROL_BASEBAND, 0x0035)  {
        Params<'a> = &'a [ConnHandleCompletedPackets];
        Return = ();
    }
}

// 0x041 - 0x04f

// 0x051 - 0x05f

// 0x061 - 0x06f

cmd! {
    /// Set Event Mask Page 2 command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-4e91f200-b802-45d6-9282-fd03c0dfefbe)
    SetEventMaskPage2(CONTROL_BASEBAND, 0x0063) {
        Params = EventMaskPage2;
        Return = ();
    }
}

// 0x071 - 0x07f

cmd! {
    /// Read Authenticated Payload Timeout command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-36c940e9-a654-f07f-75cd-2cbcf2d6adf6)
    ReadAuthenticatedPayloadTimeout(CONTROL_BASEBAND, 0x007b) {
        Params = ConnHandle;
        ReadAuthenticatedPayloadTimeoutReturn {
            timeout: Duration<10_000>,
        }
        Handle = handle: ConnHandle;
    }
}

cmd! {
    /// Write Authenticated Payload Timeout command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-9bb1bb66-1857-83d8-8954-677f773225f9)
    WriteAuthenticatedPayloadTimeout(CONTROL_BASEBAND, 0x007c) {
        WriteAuthenticatedPayloadTimeoutParams {
            timeout: Duration<10_000>,
        }
        Return = ConnHandle;
        Handle = handle: ConnHandle;
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::param::*;
    use crate::*;

    #[test]
    fn test_set_event_mask_params() {
        let mask = EventMask::default();
        let params = mask.as_hci_bytes();
        assert_eq!(params.len(), 8);
    }

    #[test]
    fn test_reset_params() {
        let params: () = ();
        let bytes = crate::AsHciBytes::as_hci_bytes(&params);
        assert_eq!(bytes.len(), 0);
    }

    #[test]
    fn test_set_event_filter_params() {
        let params = SetEventFilterParams {
            filter_type: FilterType::InquiryResult,
            filter_condition: FilterConditionType::All,
        };
        let bytes = params.as_hci_bytes();
        assert!(!bytes.is_empty());
    }

    #[test]
    fn test_flush_params() {
        let handle = ConnHandle::new(0x123);
        let bytes = handle.as_hci_bytes();
        assert_eq!(bytes, &[0x23, 0x01]);
    }

    #[test]
    fn test_read_pin_type_params() {
        let params: () = ();
        let bytes = crate::AsHciBytes::as_hci_bytes(&params);
        assert_eq!(bytes.len(), 0);
    }

    #[test]
    fn test_write_pin_type_params() {
        let params = WritePinTypeParams {
            pin_type: PinType::Fixed,
        };
        let bytes = params.as_hci_bytes();
        assert_eq!(bytes, &[0x01]);
    }

    #[test]
    fn test_read_stored_link_key_params() {
        let params = ReadStoredLinkKeyParams {
            bd_addr: BdAddr::new([1, 2, 3, 4, 5, 6]),
            read_all: false,
        };
        let bytes = params.as_hci_bytes();
        assert_eq!(bytes[0..6], [1, 2, 3, 4, 5, 6]);
        assert_eq!(bytes[6], 0x00);
    }

    #[test]
    fn test_delete_stored_link_key_params() {
        let params = DeleteStoredLinkKeyParams {
            bd_addr: BdAddr::new([1, 2, 3, 4, 5, 6]),
            delete_all: false,
        };
        let bytes = params.as_hci_bytes();
        assert_eq!(&bytes[0..6], &[1, 2, 3, 4, 5, 6]);
        assert_eq!(bytes[6], 0x00);
    }

    #[test]
    fn test_write_local_name_params() {
        let mut name = [0u8; 248];
        name[0..4].copy_from_slice(b"Test");
        let params = WriteLocalNameParams { local_name: name };
        let bytes = params.as_hci_bytes();
        assert_eq!(&bytes[0..4], b"Test");
        assert_eq!(bytes.len(), 248);
    }

    #[test]
    fn test_read_local_name_return() {
        let ret = ReadLocalNameReturn {
            local_name: [0x42; 248],
        };
        let bytes = ret.as_hci_bytes();
        assert_eq!(bytes, [0x42; 248]);
    }

    #[test]
    fn test_read_connection_accept_timeout_return() {
        let ret = ReadConnectionAcceptTimeoutReturn {
            connection_accept_timeout: 0x1234,
        };
        let bytes = ret.as_hci_bytes();
        assert_eq!(bytes, [0x34, 0x12]);
    }

    #[test]
    fn test_write_connection_accept_timeout_params() {
        let params = WriteConnectionAcceptTimeoutParams { timeout: 0x1FA0 };
        let bytes = params.as_hci_bytes();
        assert_eq!(bytes, [0xA0, 0x1F]);
    }

    #[test]
    fn test_read_page_timeout_return() {
        let ret = ReadPageTimeoutReturn { timeout: 0x2000 };
        let bytes = ret.as_hci_bytes();
        assert_eq!(bytes, [0x00, 0x20]);
    }

    #[test]
    fn test_write_page_timeout_params() {
        let params = WritePageTimeoutParams { timeout: 0x2000 };
        let bytes = params.as_hci_bytes();
        assert_eq!(bytes, [0x00, 0x20]);
    }

    #[test]
    fn test_write_scan_enable_params() {
        let params = WriteScanEnableParams {
            scan_enable: ScanEnableType::InquiryAndPageScanEnabled,
        };
        let bytes = params.as_hci_bytes();
        assert_eq!(bytes, [0x03]);
    }

    #[test]
    fn test_write_page_scan_activity_params() {
        let params = WritePageScanActivityParams {
            interval: 0x100,
            window: 0x80,
        };
        let bytes = params.as_hci_bytes();
        assert_eq!(bytes, [0x00, 0x01, 0x80, 0x00]);
    }

    #[test]
    fn test_write_inquiry_scan_activity_params() {
        let params = WriteInquiryScanActivityParams {
            inquiry_scan_interval: 0x100,
            inquiry_scan_window: 0x80,
        };
        let bytes = params.as_hci_bytes();
        assert_eq!(bytes, [0x00, 0x01, 0x80, 0x00]);
    }

    #[test]
    fn test_read_authentication_enable_return() {
        let ret = ReadAuthenticationEnableReturn {
            authentication_enable: true,
        };
        let bytes = ret.as_hci_bytes();
        assert_eq!(bytes, [0x01]);
    }
}
