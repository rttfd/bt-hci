//! Controller & Baseband commands [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-5ced811b-a6ce-701a-16b2-70f2d9795c05)

use crate::cmd;
use crate::param::{
    BdAddr, ConnHandle, ConnHandleCompletedPackets, ControllerToHostFlowControl, Duration, EventMask, EventMaskPage2,
    FilterConditionType, FilterType, PinType, PowerLevelKind,
};

// Ox001 - 0x00f

cmd! {
    /// Set Event Mask command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-9cf88217-77b4-aeb6-61fb-d1129d48a67c)
    SetEventMask(CONTROL_BASEBAND, 0x0001) {
        Params = EventMask;
        Return = ();
    }
}

cmd! {
    /// Reset command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-b0aaafb1-0601-865c-2703-4f4caa4dee2e)
    Reset(CONTROL_BASEBAND, 0x0003) {
        Params = ();
        Return = ();
    }
}

cmd! {
    /// Set Event Filter command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-b27a930e-cf04-07ad-2fb1-c1f890a2a5ff)
    ///
    /// Controls which events are generated by the HCI for the Host.
    SetEventFilter(CONTROL_BASEBAND, 0x0005) {
        SetEventFilterParams  {
            filter_type: FilterType,
            filter_condition: FilterConditionType,
        }
        Return = ();
    }
}

cmd! {
    /// Flush command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-1354d09c-b4c7-a2d4-5ac9-8bff24fd6b09)
    Flush(CONTROL_BASEBAND, 0x0008) {
        Params = ConnHandle;
        Return = ConnHandle;
    }
}

cmd! {
    /// Read PIN Type command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-dd82f0be-a8ac-1f1e-d2fc-fdf1d9c785e1)
    ReadPinType(CONTROL_BASEBAND, 0x0009) {
        Params = ();
        ReadPinTypeReturn {
            pin_type: PinType,
        }
    }
}

cmd! {
    /// Write PIN Type command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-842c5b9c-9773-8e87-30ee-a2f8223b6bf3)
    WritePinType(CONTROL_BASEBAND, 0x000a) {
        WritePinTypeParams {
            pin_type: PinType,
        }
        Return = ();
    }
}

cmd! {
    /// Read Stored Link Key command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-9c3e0da9-138b-7641-6e84-d2d17c1f082e)
    ///
    /// Reads stored link keys for one or more devices, or all devices.
    ReadStoredLinkKey(CONTROL_BASEBAND, 0x000d) {
        ReadStoredLinkKeyParams {
            bd_addr: BdAddr,
            read_all: bool,
        }
        ReadStoredLinkKeyReturn {
            max_num_keys: u8,
            num_keys_read: u8,
        }
    }
}

// 0x011 - 0x01f

// 0x021 - 0x02f

cmd! {
    /// Read Transmit Power Level command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-7205a3ee-15c7-cc48-c512-a959b4e3f560)
    ReadTransmitPowerLevel(CONTROL_BASEBAND, 0x002d) {
        ReadTransmitPowerLevelParams {
            kind: PowerLevelKind,
        }
        ReadTransmitPowerLevelReturn {
            tx_power_level: i8,
        }
        Handle = handle: ConnHandle;
    }
}

// 0x031 - 0x03f

cmd! {
    /// Set Controller To Host Flow Control command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-64d757fc-e1da-329f-6d6a-16453750f325)
    SetControllerToHostFlowControl(CONTROL_BASEBAND, 0x0031) {
        Params = ControllerToHostFlowControl;
        Return = ();
    }
}

cmd! {
    /// Host Buffer Size command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-99748527-de87-bf9c-935d-baf7e3f35b12)
    HostBufferSize(CONTROL_BASEBAND, 0x0033) {
        HostBufferSizeParams {
            host_acl_data_packet_len: u16,
            host_sync_data_packet_len: u8,
            host_total_acl_data_packets: u16,
            host_total_sync_data_packets: u16,
        }
        Return = ();
    }
}

cmd! {
    /// Host Number Of Completed Packets command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-14569cb0-16b0-7dc0-a1d4-e5a4ef44d81a)
    ///
    /// *Note:* This command only returns a [`CommandComplete`](crate::event::CommandComplete) event on error. No event is generated on success.
    HostNumberOfCompletedPackets(CONTROL_BASEBAND, 0x0035)  {
        Params<'a> = &'a [ConnHandleCompletedPackets];
        Return = ();
    }
}

// 0x041 - 0x04f

// 0x051 - 0x05f

// 0x061 - 0x06f

cmd! {
    /// Set Event Mask Page 2 command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-4e91f200-b802-45d6-9282-fd03c0dfefbe)
    SetEventMaskPage2(CONTROL_BASEBAND, 0x0063) {
        Params = EventMaskPage2;
        Return = ();
    }
}

// 0x071 - 0x07f

cmd! {
    /// Read Authenticated Payload Timeout command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-36c940e9-a654-f07f-75cd-2cbcf2d6adf6)
    ReadAuthenticatedPayloadTimeout(CONTROL_BASEBAND, 0x007b) {
        Params = ConnHandle;
        ReadAuthenticatedPayloadTimeoutReturn {
            timeout: Duration<10_000>,
        }
        Handle = handle: ConnHandle;
    }
}

cmd! {
    /// Write Authenticated Payload Timeout command [ðŸ“–](https://www.bluetooth.com/wp-content/uploads/Files/Specification/HTML/Core-54/out/en/host-controller-interface/host-controller-interface-functional-specification.html#UUID-9bb1bb66-1857-83d8-8954-677f773225f9)
    WriteAuthenticatedPayloadTimeout(CONTROL_BASEBAND, 0x007c) {
        WriteAuthenticatedPayloadTimeoutParams {
            timeout: Duration<10_000>,
        }
        Return = ConnHandle;
        Handle = handle: ConnHandle;
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::param::{BdAddr, EventMask, FilterConditionType, FilterType, PinType};
    use crate::AsHciBytes;

    #[test]
    fn test_set_event_mask_params() {
        let mask = EventMask::default();
        let params = mask.as_hci_bytes();
        assert_eq!(params.len(), 8);
    }

    #[test]
    fn test_reset_params() {
        let params: () = ();
        let bytes = crate::AsHciBytes::as_hci_bytes(&params);
        assert_eq!(bytes.len(), 0);
    }

    #[test]
    fn test_set_event_filter_params() {
        let params = SetEventFilterParams {
            filter_type: FilterType::InquiryResult,
            filter_condition: FilterConditionType::All,
        };
        let bytes = params.as_hci_bytes();
        assert!(!bytes.is_empty());
    }

    #[test]
    fn test_flush_params() {
        let handle = ConnHandle::new(0x123);
        let bytes = handle.as_hci_bytes();
        assert_eq!(bytes, &[0x23, 0x01]);
    }

    #[test]
    fn test_read_pin_type_params() {
        let params: () = ();
        let bytes = crate::AsHciBytes::as_hci_bytes(&params);
        assert_eq!(bytes.len(), 0);
    }

    #[test]
    fn test_write_pin_type_params() {
        let params = WritePinTypeParams {
            pin_type: PinType::Fixed,
        };
        let bytes = params.as_hci_bytes();
        assert_eq!(bytes, &[0x01]);
    }

    #[test]
    fn test_read_stored_link_key_params() {
        let params = ReadStoredLinkKeyParams {
            bd_addr: BdAddr::new([1, 2, 3, 4, 5, 6]),
            read_all: false,
        };
        let bytes = params.as_hci_bytes();
        assert_eq!(bytes[0..6], [1, 2, 3, 4, 5, 6]);
        assert_eq!(bytes[6], 0x00);
    }
}
